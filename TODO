Condition:
	- filter records when created
	- filter records when destroyed

Join:
	- has_many :keys, :as => :keyable
	- only displays data when a key with Condition's involving fields on both sides has been created
	- key_records:
		- need to support join records...

- keys: 
	- create key/join: 
		- clear form after creation
- div (re)sizing and containment

- Join:
	- join_url/X
		- main_display 
			- columns: left.(names) + right.(names)
			- empty to begin with, data when filter applied


	- Display:
		- column names: (left|right).<field name>
		- add record.id columns for left and right
		- views:
			- All Join Records
			- left duplicates
			- right duplicates
			- missing records (left and right display)

- key:
	- allow creation on top of Join or DataSet
	- allow creation of Filters
		
- revision analysis:
	- select revision
	- show key-analysis:
		- for each key on dataset or revision
			- how many record matchups (domain composition integrity)
	- modify data_table display
		- new records: green 
		- lost records: add to datatable, colored red
		- changed records:
			- new field: cell is green
			- deleted field: cell is red
			- changed value: cell is yellow

api:
  - gem
		- privacy:
			- public site + public database
			- public site pointing to private database
			- private site pointing to private database


	- for logging: 
	  - $table = Table.new( "stats" )
		- $table = Table.head( "stats" ) # revision( "stats", :created_at => )
	  - $table = Table.new( "stats", "id=5" ) # with parameters
		- $table = Table.new( "stats", "id=5", "pro-football-reference.com/stats/5/" )
		- $table.log( :notice => "Crawler starting load", :job_id => "18383" )
		- my_hash.keys.each_with_index do |key,i|
				$table.log( :i => i, :key => key, :value => my_hash[key] )
			end
	- for data usage:
		- pull data out, process it, then relog it